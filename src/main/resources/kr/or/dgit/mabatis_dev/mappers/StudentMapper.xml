<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dgit.mybatis_dev.dao.StudentDao">
	<!-- 동일하게 사용될 구문은 sql 태그를 사용해 미리 정의해 둘 수 있음 -->
	<sql id="selectSql">
		select stud_id, name, email, phone from students
	</sql>
	<sql id="insertSql">
		insert into students(stud_id, name, email, phone, dob) values(#{studId}, #{name}, #{email}, #{phone}, #{dob})
	</sql>
	<sql id="updateSql">
		update students set name = #{name}, email = #{email}, phone = #{phone}, dob = #{dob} where stud_id = #{studId}
	</sql>
	<sql id="deleteSql">
		delete from students where stud_id = #{studId}
	</sql>
	<!-- <sql id="whereSql">
		<where>
			<if test="studId != null">
				where stud_id = #{studId}
			</if>
		</where>
	</sql> -->
	
	<!-- getMapper를 이용한 방법 -->
	<select id="selectStudentByNo" parameterType="Student" resultType="Student">
		 <!-- 미리 지정해둔 sql 문은 include 문을 활용해 사용할 수 있음 -->
		 <include refid="selectSql" /> where stud_id = #{studId}
	</select>
	<select id="selectStudentByAll" resultType="Student">
		<include refid="selectSql"></include>
	</select>
	
	<!-- sqlSession의 함수를 이용한 방법 -->
	<select id="selectOne" parameterType="Student" resultType="Student">
		<include refid="selectSql" /> where stud_id = #{studId}
	</select>
	
	<select id="selectList" resultType="Student">
		<include refid="selectSql" /> 
	</select>
	
	<insert id="insertStudent" parameterType="Student">
		<include refid="insertSql"></include>
	</insert>
		
	<insert id="insertStudentWithAPI" parameterType="Student">
		<include refid="insertSql"></include>
	</insert>
	
	<insert id="insertStudentAutoInc" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertSql"></include>
	</insert>
	
	<update id="updateStudent">
		<include refid="updateSql"></include>
	</update>
	<update id="updateStudentWithAPI">
		<include refid="updateSql"></include>
	</update>
	
	<delete id="deleteStudent">
		<include refid="deleteSql"></include>
	</delete>
	<delete id="deleteStudentWithAPI">
		<include refid="deleteSql"></include>
	</delete>
	
	
	<!-- resultMap을 이용하는 방법 -->
	<resultMap id="StudentResult" type="Student">
		<id property="studId" column="stud_Id"/>
		<id property="name" column="name"/>
		<id property="email" column="email"/>
		<id property="phone" column="phone"/>
		<id property="dob" column="dob"/>
	</resultMap>
	
	<select id="selectStudentByAllForResultMap" resultMap="StudentResult">
		<include refid="selectSql"></include>
	</select>
	<select id="selectStudentByAllForResultMapWithAPI" resultMap="StudentResult">
		<include refid="selectSql"></include>
	</select>
	
	<select id="selectStudentByAllForHashMap" resultType="map">
		<include refid="selectSql"></include>
	</select>
	<select id="selectStudentByAllForHashMapWithAPI" resultType="map">
		<include refid="selectSql"></include>
	</select>
	
	<!-- typeHandlers를 사용하지 않고 MyBatis에게 새로 작성된 Address 클래스를 인식시키는 방법 -->
	<resultMap id="StudentWithAddressResult" type="Student" extends="StudentResult">
		<result property="address.addrId" column="addr_id"/>
		<result property="address.street" column="street"/>
		<result property="address.city" column="city"/>
		<result property="address.state" column="state"/>
		<result property="address.zip" column="zip"/>
		<result property="address.country" column="country"/>
	</resultMap>
	
	<sql id="selectJoinAddressSql">
		select stud_id, name, email, phone, a.addr_id, street, city, state, zip, country from students s 
		left outer join addresses a on s.addr_id = a.addr_id
	</sql>
	
	<select id="selectStudentByNoForResultMapExtends" parameterType="Student" resultMap="StudentWithAddressResult">
		<include refid="selectJoinAddressSql" /> where stud_id = #{studId}
	</select>
	<select id="selectStudentByNoForResultMapExtendsWithAPI" parameterType="Student" resultMap="StudentWithAddressResult">
		<include refid="selectJoinAddressSql" /> where stud_id = #{studId}
	</select>
	
	<resultMap type="Student" id="StudentAssociation" extends="StudentResult">
		<association property="address" resultMap="kr.or.dgit.mybatis_dev.dao.AddressDao.AddressResult" />
	</resultMap>
	
	<select id="selectStudentByNoAssociation" parameterType="Student" resultMap="StudentAssociation">
		<include refid="selectJoinAddressSql" /> where stud_id = #{studId}
	</select>
	
	<select id="selectStudentByNoAssociationWithAPI" parameterType="Student" resultMap="StudentAssociation">
		<include refid="selectJoinAddressSql" /> where stud_id = #{studId}
	</select>
	
	<!-- enum 타입 -->
	<sql id="insertEnumSql">
		insert into students(stud_id, name, email, phone, dob, gender) values(#{studId}, #{name}, #{email}, #{phone}, #{dob}, #{gender})
	</sql>
	
	<insert id="insertEnumStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertEnumSql"></include>
	</insert>
	
	<insert id="insertEnumStudentWithAPI" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
		<include refid="insertEnumSql"></include>
	</insert>
	
	
	<resultMap type="Student" id="StudentGenderResult" extends="StudentResult">
		<result property="gender" column="gender"/>
	</resultMap>
	
	<sql id="selectParameterSql">
		select stud_id, name, email, phone, dob, gender from students
	</sql>
	<sql id="whereNameEmailSql">
		<where>
			<if test="name !=null">
				name = #{name}
			</if>
			<if test="email !=null">
				and email = #{email}
			</if>
		</where>
	</sql>
	
	<select id="selectAllStudentByParam" resultMap="StudentGenderResult">
		<include refid="selectParameterSql" />
		where name = #{param1} and email = #{param2}
	</select>
	
	<select id="selectAllStudentByStudent" parameterType="Student" resultMap="StudentGenderResult">
		<include refid="selectParameterSql"/>
		<include refid="whereNameEmailSql"/>
	</select>
	
	<select id="selectAllStudentByMap" parameterType="map" resultMap="StudentGenderResult">
		<include refid="selectParameterSql"/>
		<include refid="whereNameEmailSql"/>
	</select>
	
	<select id="selectStudentForMap" resultMap="StudentResult">
		<include refid="selectParameterSql"/>
	</select>
</mapper>